### Sales Order Status Update Tests with Stock Reservation

# Test 1: Create a sales order (should reserve stock)
POST {{baseUrl}}/api/salesorders
Content-Type: application/json

{
  "customerId": "{{customerId}}",
  "orderedByUserId": "test-user-123",
  "orderNotes": "Test order for stock reservation",
  "orderItems": [
    {
      "productId": "{{productId}}",
      "quantity": 5,
      "unitPrice": 100.00,
      "notes": "Test item"
    }
  ]
}

###

# Test 2: Get sales orders to find the created order
GET {{baseUrl}}/api/salesorders?page=1&pageSize=10

###

# Test 3: Update status from New to Processing (should validate reserved stock)
PUT {{baseUrl}}/api/salesorders/{{salesOrderId}}/status
Content-Type: application/json

{
  "status": "Processing",
  "updatedByUserId": "test-user-123"
}

###

# Test 4: Update status from Processing to Shipped (should release reservations and deduct actual stock)
PUT {{baseUrl}}/api/salesorders/{{salesOrderId}}/status
Content-Type: application/json

{
  "status": "Shipped",
  "updatedByUserId": "test-user-123",
  "shippedDate": "2025-07-25T10:00:00Z"
}

###

# Test 5: Update status from Shipped to Completed
PUT {{baseUrl}}/api/salesorders/{{salesOrderId}}/status
Content-Type: application/json

{
  "status": "Completed",
  "updatedByUserId": "test-user-123",
  "deliveredDate": "2025-07-25T12:00:00Z"
}

###

# Test 6: Create another order and cancel it (should release reservations)
POST {{baseUrl}}/api/salesorders
Content-Type: application/json

{
  "customerId": "{{customerId}}",
  "orderedByUserId": "test-user-123",
  "orderNotes": "Test order for cancellation",
  "orderItems": [
    {
      "productId": "{{productId}}",
      "quantity": 3,
      "unitPrice": 100.00,
      "notes": "Test item for cancellation"
    }
  ]
}

###

# Test 7: Cancel the order (should release reservations)
PUT {{baseUrl}}/api/salesorders/{{cancelOrderId}}/status
Content-Type: application/json

{
  "status": "Cancelled",
  "updatedByUserId": "test-user-123"
}

###

# Test 8: Create order, ship it, then return it (should add stock back)
POST {{baseUrl}}/api/salesorders
Content-Type: application/json

{
  "customerId": "{{customerId}}",
  "orderedByUserId": "test-user-123",
  "orderNotes": "Test order for return",
  "orderItems": [
    {
      "productId": "{{productId}}",
      "quantity": 2,
      "unitPrice": 100.00,
      "notes": "Test item for return"
    }
  ]
}

###

# Test 9: Ship the return test order
PUT {{baseUrl}}/api/salesorders/{{returnOrderId}}/status
Content-Type: application/json

{
  "status": "Shipped",
  "updatedByUserId": "test-user-123"
}

###

# Test 10: Return the shipped order (should add stock back)
PUT {{baseUrl}}/api/salesorders/{{returnOrderId}}/status
Content-Type: application/json

{
  "status": "Returned",
  "updatedByUserId": "test-user-123"
}

###

# Variables to set before running tests:
@baseUrl = https://localhost:7084
@customerId = [REPLACE_WITH_ACTUAL_CUSTOMER_ID]
@productId = [REPLACE_WITH_ACTUAL_PRODUCT_ID]
@salesOrderId = [REPLACE_WITH_CREATED_ORDER_ID]
@cancelOrderId = [REPLACE_WITH_CANCEL_ORDER_ID]
@returnOrderId = [REPLACE_WITH_RETURN_ORDER_ID]

export interface SalesOrder {
  id: string;
  customerId: string;
  customerName: string;
  orderDate: Date;
  status: SalesOrderStatus;
  totalAmount: number;
  orderedByUserId: string;
  orderNotes?: string;
  referenceNumber?: string;
  shippedDate?: Date;
  deliveredDate?: Date;
  createdAt: Date;
  updatedAt: Date;
  isDeleted: boolean;
  orderItems: SalesOrderItem[];
}

export interface SalesOrderItem {
  id: string;
  salesOrderId: string;
  productId: string;
  productName: string;
  productSku: string;
  quantity: number;
  unitPriceAtTimeOfOrder: number;
  lineTotal: number;
  notes?: string;
  createdAt: Date;
  updatedAt: Date;
  isDeleted: boolean;
}

export interface SalesOrderCreateRequest {
  customerId: string;
  orderedByUserId: string;
  orderNotes?: string;
  // referenceNumber removed - now auto-generated by backend
  orderItems: SalesOrderItemCreateRequest[];
}

export interface SalesOrderItemCreateRequest {
  productId: string;
  quantity: number;
  unitPrice: number;
  notes?: string;
}

export interface SalesOrderUpdateRequest {
  orderNotes?: string;
  referenceNumber?: string;
  orderItems?: SalesOrderItemUpdateRequest[];
}

export interface SalesOrderItemUpdateRequest {
  id?: string; // null for new items
  productId: string;
  quantity: number;
  unitPrice: number;
  notes?: string;
  isDeleted?: boolean;
}

export interface SalesOrderStatusUpdateRequest {
  status: SalesOrderStatus;
  shippedDate?: Date;
  deliveredDate?: Date;
  updatedByUserId?: string; // Added for audit trail
}

export interface SalesOrderQueryParameters {
  page?: number;
  pageSize?: number;
  searchTerm?: string;
  sortBy?: string;
  sortDescending?: boolean;
  customerId?: string;
  status?: SalesOrderStatus;
  orderDateFrom?: Date;
  orderDateTo?: Date;
  includeDeleted?: boolean;
  onlyInactive?: boolean;
}

export interface SalesOrderStats {
  totalOrders: number;
  totalRevenue: number;
  newOrders: number;
  processingOrders: number;
  shippedOrders: number;
  completedOrders: number;
  cancelledOrders: number;
  onHoldOrders: number;
  averageOrderValue: number;
}

export enum SalesOrderStatus {
  New = 0,
  Processing = 1,
  Shipped = 2,
  Completed = 3,
  Cancelled = 4,
  Returned = 5,
  OnHold = 6
}

// Helper functions for status
export const salesOrderStatusLabels: Record<SalesOrderStatus, string> = {
  [SalesOrderStatus.New]: 'New',
  [SalesOrderStatus.Processing]: 'Processing',
  [SalesOrderStatus.Shipped]: 'Shipped',
  [SalesOrderStatus.Completed]: 'Completed',
  [SalesOrderStatus.Cancelled]: 'Cancelled',
  [SalesOrderStatus.Returned]: 'Returned',
  [SalesOrderStatus.OnHold]: 'On Hold'
};

export const salesOrderStatusColors: Record<SalesOrderStatus, string> = {
  [SalesOrderStatus.New]: 'bg-blue-100 text-blue-800',
  [SalesOrderStatus.Processing]: 'bg-yellow-100 text-yellow-800',
  [SalesOrderStatus.Shipped]: 'bg-purple-100 text-purple-800',
  [SalesOrderStatus.Completed]: 'bg-green-100 text-green-800',
  [SalesOrderStatus.Cancelled]: 'bg-red-100 text-red-800',
  [SalesOrderStatus.Returned]: 'bg-gray-100 text-gray-800',
  [SalesOrderStatus.OnHold]: 'bg-orange-100 text-orange-800'
};

export function getStatusLabel(status: SalesOrderStatus): string {
  return salesOrderStatusLabels[status] || 'Unknown';
}

export function getStatusColor(status: SalesOrderStatus): string {
  return salesOrderStatusColors[status] || 'bg-gray-100 text-gray-800';
}

// Status transition validation
export const validStatusTransitions: Record<SalesOrderStatus, SalesOrderStatus[]> = {
  [SalesOrderStatus.New]: [SalesOrderStatus.Processing, SalesOrderStatus.OnHold, SalesOrderStatus.Cancelled],
  [SalesOrderStatus.Processing]: [SalesOrderStatus.Shipped, SalesOrderStatus.OnHold, SalesOrderStatus.Cancelled],
  [SalesOrderStatus.OnHold]: [SalesOrderStatus.Processing, SalesOrderStatus.Cancelled],
  [SalesOrderStatus.Shipped]: [SalesOrderStatus.Completed, SalesOrderStatus.Returned],
  [SalesOrderStatus.Completed]: [SalesOrderStatus.Returned],
  [SalesOrderStatus.Cancelled]: [],
  [SalesOrderStatus.Returned]: []
};

export function canTransitionTo(currentStatus: SalesOrderStatus, newStatus: SalesOrderStatus): boolean {
  return validStatusTransitions[currentStatus]?.includes(newStatus) || false;
}

export function getValidTransitions(currentStatus: SalesOrderStatus): SalesOrderStatus[] {
  return validStatusTransitions[currentStatus] || [];
}
